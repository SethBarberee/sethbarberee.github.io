<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://www.abhinavsaxena.com/moonwalk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.abhinavsaxena.com/moonwalk/" rel="alternate" type="text/html" /><updated>2023-02-16T04:53:04+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/feed.xml</id><title type="html">Seth Barberee</title><subtitle>Random place on the internet for some random guy's stuff</subtitle><author><name>Seth Barberee</name></author><entry><title type="html">LSP and Pokemon Decomp</title><link href="https://www.abhinavsaxena.com/moonwalk/lsp-and-pokemon-decomp" rel="alternate" type="text/html" title="LSP and Pokemon Decomp" /><published>2023-02-12T00:00:00+00:00</published><updated>2023-02-12T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/LSP-and-Pokemon-Decomp</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/lsp-and-pokemon-decomp">&lt;p&gt;Most people tend to use VS Code for Pokemon decomp and it works very nicely for
them with clangd all set up and tools. However, I’m different. I like to use
neovim and just doing clangd normally will give errors. Why? Well, you need to
generate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compile_commands.json&lt;/code&gt; first. So, using a tool called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compiledb&lt;/code&gt;, I’ll do that now for pokeemerald.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compiledb make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will fix most of the previous errors because now, clangd sees the custom
compiler that Pokemon decompilations use. There are still some warnings and
errors. Mainly, with how the code sets graphics like:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gMonFrontPic_Ivysaur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INCBIN_U32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;graphics/pokemon/ivysaur/anim_front.4bpp.lz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can tweak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.clangd&lt;/code&gt; with the following config:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CompileFlags:
    Remove: [-mthumb-interwork, -fhex-asm]
    Add: [--include=include/global.h, --include=include/gba/types.h, -Wno-pointer-sign, -D __APPLE__] # include GBA global to fix type errors, silence pointer warnings for text, and use define to silence other warnings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D __APPLE__&lt;/code&gt; tricks the compiler to take an optimized route in the code and
use the workarounds that VS Code uses.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--include=include/global.h, --include=include/gba/types.h, -Wno-pointer-sign&lt;/code&gt;
adds in our custom types and other gba/pokemon specific things to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-mthumb-interwork, -fhex-asm&lt;/code&gt; these flags cause some issues with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt; so
we’ll remove it. It won’t make a difference in our diagnostics/warnings.&lt;/p&gt;

&lt;h3 id=&quot;extra-credit&quot;&gt;Extra Credit&lt;/h3&gt;
&lt;p&gt;If you go down the hole of scripting in pokeemerald, there is an interesting
project called poryscript, which can replace normal scripting. It is a
different language and has an LSP server! So, install poryscrip-pls (however
you do it for your OS). 
Now, we need to make neovim call poryscript-pls when it enters the buffer. We
can do this via a custom nvim-lspconfig configuration. I created the following
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lua/lspconfig/server_configurations/poryscript_lsp.lua&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lspconfig.util'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;default_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;poryscript-pls&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filetypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pory'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_git_ancestor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;single_file_support&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;docs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[[
https://github.com/huderlem/poryscript-pls

Language server for poryscript (a high level scripting language for pokemon decompilation projects)

 ]]&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;root_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[[util.find_git_ancestor]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice, so now this is registered in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvim-lspconfig&lt;/code&gt; and we can call the
following in our config to autostart the lsp on the buffer.&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lspconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'poryscript_lsp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:LspInfo&lt;/code&gt; and verify it’s attached. Now, it is working but we
don’t have any meaningful diagnostics/warnings yet because this LSP is a
little special and needs some special handlers. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poryscript-lsp&lt;/code&gt; calls custom
methods that standard neovim doesn’t know yet. So, we’ll add them to our
config then:&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;poryscript/getPoryscriptFiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- TODO: search for all *pory files for this request&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/data/scripts/test2.pory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;--print(files)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files_array&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;poryscript/getfileuri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;--print(&quot;get file uri&quot;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;--print(vim.inspect(result))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri_from_bufnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;poryscript/readfile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufnr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri_to_bufnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nvim_buf_is_loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- NOTE: Read the lines in the buffer and then combine into a string since poryscript-pls expects a string&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nvim_buf_get_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;poryscript/readfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufnr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri_to_bufnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nvim_buf_is_loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- NOTE: Read the lines in the buffer and then combine into a string since poryscript-pls expects a string&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nvim_buf_get_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note, this isn’t exactly perfect noted by the TODO but this will get us some diagnostics now.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><category term="LSP" /><category term="nvim" /><summary type="html">Most people tend to use VS Code for Pokemon decomp and it works very nicely for them with clangd all set up and tools. However, I’m different. I like to use neovim and just doing clangd normally will give errors. Why? Well, you need to generate the compile_commands.json first. So, using a tool called compiledb, I’ll do that now for pokeemerald.</summary></entry><entry><title type="html">We keep keeping on</title><link href="https://www.abhinavsaxena.com/moonwalk/we-keep-keeping-on" rel="alternate" type="text/html" title="We keep keeping on" /><published>2022-11-14T00:00:00+00:00</published><updated>2022-11-14T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/We-keep-keeping-on</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/we-keep-keeping-on">&lt;p&gt;Time flies, huh? My last post was… 9 months ago?! Jeez. Maybe I should set
an alarm/reminder to make sure I write these. Anyway, I’ve been all over the
place.&lt;/p&gt;

&lt;h2 id=&quot;pmd-red-progress&quot;&gt;PMD Red Progress&lt;/h2&gt;
&lt;p&gt;pmd-red has been doing great and progress continues. Here’s the current
status:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;725060&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;246992&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0650&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;478068&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;14930&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6915&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3161&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;313&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partially&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0965&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;7702&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undocumented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5874&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;32059294&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;51833&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1617&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;32007461&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8383&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;85658061&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3264&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incbins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;267&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1864&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That’s more than a third of the game that has been decompiled and almost half
of it has been documented. Of course, I’m not doing this alone. Many people
have been contributing too.&lt;/p&gt;

&lt;h2 id=&quot;tree-sitter-asm&quot;&gt;tree-sitter-asm&lt;/h2&gt;
&lt;p&gt;If you have checked my GitHub profile recently, you may have seen that I’ve
been working on a tree-sitter parser of my own. Given that I stare at lines of
ARM/THUMB code for hours and hours (when I’m not at work, of course), I wanted
to see if I could make my experience better. Within one weekend, I had a
basic prototype that worked pretty well. There are bugs of course but it looks
great!&lt;/p&gt;

&lt;div id=&quot;img-container&quot;&gt;
&lt;img src=&quot;/assets/tree-sitter-asm.png&quot; alt=&quot;Normal Vim syntax on Left and tree-sitter-asm on the Right&quot; /&gt;  
&lt;center&gt;&lt;span class=&quot;caption&quot;&gt;Normal Vim syntax on Left and tree-sitter-asm on the Right&lt;/span&gt;&lt;/center&gt;

&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- Mainly to create a line break --&gt;&lt;/p&gt;

&lt;p&gt;Is it ready to include in the nvim-treesitter repo? Probably not. However, I
use it daily and enjoy that I created it.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><category term="pmd-red" /><category term="tree-sitter-asm" /><summary type="html">Time flies, huh? My last post was… 9 months ago?! Jeez. Maybe I should set an alarm/reminder to make sure I write these. Anyway, I’ve been all over the place.</summary></entry><entry><title type="html">Jamming to a New Beat</title><link href="https://www.abhinavsaxena.com/moonwalk/jamming-to-a-new-beat" rel="alternate" type="text/html" title="Jamming to a New Beat" /><published>2022-02-03T00:00:00+00:00</published><updated>2022-02-03T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/Jamming-to-a-New-Beat</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/jamming-to-a-new-beat">&lt;p&gt;I’m not a stranger to music. I’ve listened to music for most of my life and
even played it for a few years during the middle school to high school years.
I have a &lt;strong&gt;very&lt;/strong&gt; large play time on Spotify because I listen almost every
second. When I’m home, I also listen to music on the side or when working from
home. In addition, I have a decent collection of music locally on my desktop
that I like to play on occasion. I do pay for Spotify Premium and will
probably continue to pay for it in the near future however I wanted to do
something different on my desktop. Spotify on Linux can be a little memory hog
(thanks Electron) and every now and then, I spin up MPD to listen to my local
music selection. I had seen articles/blog posts from other people about how
they can stream Spotify from the terminal but I never tried it myself.&lt;/p&gt;

&lt;p&gt;Enter Mopidy. Mopidy is a MPD equivalent that is extensible with Python
plugins. The capability for Spotify is one of those plugins. By default,
Mopidy only uses your local Music (on par with MPD). Once you
install/configure other plugins, you can add more functionality. For now, I’ve
settled on the following for my Mopidy install:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mopidy - Local (locally installed music)&lt;/li&gt;
  &lt;li&gt;Mopidy - MPRIS (MPRIS Control in KDE and other environments)&lt;/li&gt;
  &lt;li&gt;Mopidy - Spotify (Spotify playback)&lt;/li&gt;
  &lt;li&gt;Mopidy - YTMusic (YouTube Music playback)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me, this is a nice, little setup as I can control everything from the KDE
panel or my media buttons. In addition, I gain YouTube Music functionality.
Albeit, there are still some bugs with YTMusic, in respect to certain songs,
but it doesn’t detract from the rest of my positive experience. I can mix
different sources with ease and enjoy my music the way I want to. It’s times
like these that remind me why I enjoy running Linux. I can easily find an
alternative and after a little bit of time, I’ve got something equal or
possibly better.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><category term="mpd" /><category term="mopidy" /><summary type="html">I’m not a stranger to music. I’ve listened to music for most of my life and even played it for a few years during the middle school to high school years. I have a very large play time on Spotify because I listen almost every second. When I’m home, I also listen to music on the side or when working from home. In addition, I have a decent collection of music locally on my desktop that I like to play on occasion. I do pay for Spotify Premium and will probably continue to pay for it in the near future however I wanted to do something different on my desktop. Spotify on Linux can be a little memory hog (thanks Electron) and every now and then, I spin up MPD to listen to my local music selection. I had seen articles/blog posts from other people about how they can stream Spotify from the terminal but I never tried it myself.</summary></entry><entry><title type="html">Another Year, Still a Pandemic</title><link href="https://www.abhinavsaxena.com/moonwalk/another-year-still-a-pandemic" rel="alternate" type="text/html" title="Another Year, Still a Pandemic" /><published>2022-01-01T00:00:00+00:00</published><updated>2022-01-01T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/Another-Year,-Still-a-Pandemic</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/another-year-still-a-pandemic">&lt;p&gt;Currently in the terminal here at Love Field, with my mask on my face. I’ve
had an hour and a half delay so figured I should probably write one of these
since it’s been a while. My job has kept me busy but that doesn’t mean that
any of my projects are on the backburner. PMD-Red has been pretty steady the
past year with consistent contributions from multiple people. pfero has
recently joined up and cleaned up the shoddy job that I did on the Makefile.
One of the nice benefits has been better dependency scanning and faster
builds! As we approach 25% decompiled C code, I can’t help but smile that my
initial perseverance has paid off with more and more people coming to help
this project. 
When I have some free time, I’ve been tinkering with new stuff too.
Recently, I’ve looked into cutter (python/qt alternative to Ghidra). Sometimes
Java can be a pain on linux but this isn’t one of those cases. As with most
software, I just want to do a comparison for myself and figure out what works
best for me. But at least, I can use the Ghidra decompiler in cutter!
My nvim config hasn’t really changed much despite the fast moving
environment of neovim 0.5 and 0.6. Only changes I’ve had to do was change
was an API call that was modified on 0.6 for LSP but that’s understandable
as the API isn’t even stable yet. Most of my config is intended to be usable
on VIM too. The LSP is just a little icing on the cake that I enjoy but don’t
depend on. (I slowly cannot say the same for treesitter. Dang, it’s nice.)
I’ve debated trying to make a colorscheme but given my terrible art and
creativity skills, I’m not sure how well that would go. Maybe I’ll just stick
to my challenger-deep, for now. When I am truly bored, I’ll give it a go.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><summary type="html">Currently in the terminal here at Love Field, with my mask on my face. I’ve had an hour and a half delay so figured I should probably write one of these since it’s been a while. My job has kept me busy but that doesn’t mean that any of my projects are on the backburner. PMD-Red has been pretty steady the past year with consistent contributions from multiple people. pfero has recently joined up and cleaned up the shoddy job that I did on the Makefile. One of the nice benefits has been better dependency scanning and faster builds! As we approach 25% decompiled C code, I can’t help but smile that my initial perseverance has paid off with more and more people coming to help this project. When I have some free time, I’ve been tinkering with new stuff too. Recently, I’ve looked into cutter (python/qt alternative to Ghidra). Sometimes Java can be a pain on linux but this isn’t one of those cases. As with most software, I just want to do a comparison for myself and figure out what works best for me. But at least, I can use the Ghidra decompiler in cutter! My nvim config hasn’t really changed much despite the fast moving environment of neovim 0.5 and 0.6. Only changes I’ve had to do was change was an API call that was modified on 0.6 for LSP but that’s understandable as the API isn’t even stable yet. Most of my config is intended to be usable on VIM too. The LSP is just a little icing on the cake that I enjoy but don’t depend on. (I slowly cannot say the same for treesitter. Dang, it’s nice.) I’ve debated trying to make a colorscheme but given my terrible art and creativity skills, I’m not sure how well that would go. Maybe I’ll just stick to my challenger-deep, for now. When I am truly bored, I’ll give it a go.</summary></entry><entry><title type="html">Revving it Up</title><link href="https://www.abhinavsaxena.com/moonwalk/revving-it-up" rel="alternate" type="text/html" title="Revving it Up" /><published>2021-07-30T00:00:00+00:00</published><updated>2021-07-30T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/Revving-it-Up</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/revving-it-up">&lt;p&gt;It’s been a while since I touched this blog. My excuse, Travis CI. I was about
to do another post and realized it wouldn’t update. So, I spent like 10 mins
moving it from Travis to Github Actions. Turned out nicely and I don’t have to
worry about dumb credits. Work has been relentless in keeping me busy but PMD:
Red has made some good progress. Here’s a status update:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;725060&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;118544&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3495&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;606516&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6505&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10794&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3134&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0346&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;153&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partially&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4175&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;7507&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undocumented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5479&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;32059318&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;20902&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0652&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;32038416&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9348&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;2878058&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1431&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incbins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6715&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far, there’s some pretty good progress. A recent contributor, DenSinH, has
come along to help with decomping items and Pokemon. This has allowed me to
work some more on data and shiftability. As you can see from recent PRs, most
of the story line dungeons have actually been converted to JSON to allow for
future tools to read/edit it. PoryDungeon when?&lt;/p&gt;

&lt;p&gt;Aside from that, I did pre-order a Steam Deck so can’t wait to try that out
and enjoy. COVID seems to drag on here but we keep on going. For me, I’ll keep
revving through it all as we just saw with my blog.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><category term="pmd-red" /><summary type="html">It’s been a while since I touched this blog. My excuse, Travis CI. I was about to do another post and realized it wouldn’t update. So, I spent like 10 mins moving it from Travis to Github Actions. Turned out nicely and I don’t have to worry about dumb credits. Work has been relentless in keeping me busy but PMD: Red has made some good progress. Here’s a status update:</summary></entry><entry><title type="html">I am still alive</title><link href="https://www.abhinavsaxena.com/moonwalk/i-am-still-alive" rel="alternate" type="text/html" title="I am still alive" /><published>2021-02-21T00:00:00+00:00</published><updated>2021-02-21T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/I-am-still-alive</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/i-am-still-alive">&lt;p&gt;Huh, I haven’t really posted much on this blog. It’s been almost a year since
the last post. Since then, I got my degree in Computer Engineering (mailed to
me, of course because of COVID) and I’m settling into my job in California.
I’ve almost finished up my first year in my Test Engineering position and will
rotate in June to a new position for a year. I don’t have an idea what it will
be yet however it &lt;em&gt;should&lt;/em&gt; be in California so I won’t have to move again. (I
really don’t want to move again right when I just did it.) Aside from work,
I’ve been doing more reverse engineering work on Pokemon Mystery Dungeon: Red
Rescue Team. In fact, I’m the main contributor behind the work right now. I
was given collaborator status to the main pret repo so I’ve been hard at work
pushing the decompilation. (Currently at 6% C Code and 24% symbols documented
btw) I have a cute cat, Tanner, who snuggles with me and reminds me of the
good in the world during these hard times. Given that most of my family are in
Texas and my flaw of never communicating, sometimes my family worry about
whether I am still alive. I had to respond to my mom today saying that “Yes, I
am still alive”. Make sure to keep your loved ones in contact. Practice what I
preach, am I right?&lt;/p&gt;</content><author><name>Seth Barberee</name></author><summary type="html">Huh, I haven’t really posted much on this blog. It’s been almost a year since the last post. Since then, I got my degree in Computer Engineering (mailed to me, of course because of COVID) and I’m settling into my job in California. I’ve almost finished up my first year in my Test Engineering position and will rotate in June to a new position for a year. I don’t have an idea what it will be yet however it should be in California so I won’t have to move again. (I really don’t want to move again right when I just did it.) Aside from work, I’ve been doing more reverse engineering work on Pokemon Mystery Dungeon: Red Rescue Team. In fact, I’m the main contributor behind the work right now. I was given collaborator status to the main pret repo so I’ve been hard at work pushing the decompilation. (Currently at 6% C Code and 24% symbols documented btw) I have a cute cat, Tanner, who snuggles with me and reminds me of the good in the world during these hard times. Given that most of my family are in Texas and my flaw of never communicating, sometimes my family worry about whether I am still alive. I had to respond to my mom today saying that “Yes, I am still alive”. Make sure to keep your loved ones in contact. Practice what I preach, am I right?</summary></entry><entry><title type="html">New Apartment, New Life</title><link href="https://www.abhinavsaxena.com/moonwalk/new-apartment-new-life" rel="alternate" type="text/html" title="New Apartment, New Life" /><published>2020-08-14T00:00:00+00:00</published><updated>2020-08-14T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/New-Apartment,-New-Life</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/new-apartment-new-life">&lt;p&gt;I’m about two weeks into the new apartment life here in California. Given the
rage still of COVID19, I’ve already started the search for a quarantine buddy.
Humane Society website has been a great way to end the day of browsing at
cats. Hopefully, I can adopt one in the near future. I really want a kitty. In
other news, I’ve started to get the ropes on my new job as a Test Engineer at
Texas Instruments. I’ve been working at home but slowly anticipating when I
can slip into the office for like a few hours. I’m two months into the job and
my first major product project is about to ramp up. I can’t wait to work on
it. While I’ve been waiting for that, I’ve been tasked with looking over a
test program for a product and see how it aligns to the datasheet and explain
each test. Mix of hardware and software, the way I like it. Been messing with
more Vim configuration and GBA decomp stuff in the free time. The more I learn
about it, the more I am amazed about the Game Boy Advance. It was really
impressive for its features.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><summary type="html">I’m about two weeks into the new apartment life here in California. Given the rage still of COVID19, I’ve already started the search for a quarantine buddy. Humane Society website has been a great way to end the day of browsing at cats. Hopefully, I can adopt one in the near future. I really want a kitty. In other news, I’ve started to get the ropes on my new job as a Test Engineer at Texas Instruments. I’ve been working at home but slowly anticipating when I can slip into the office for like a few hours. I’m two months into the job and my first major product project is about to ramp up. I can’t wait to work on it. While I’ve been waiting for that, I’ve been tasked with looking over a test program for a product and see how it aligns to the datasheet and explain each test. Mix of hardware and software, the way I like it. Been messing with more Vim configuration and GBA decomp stuff in the free time. The more I learn about it, the more I am amazed about the Game Boy Advance. It was really impressive for its features.</summary></entry><entry><title type="html">Hacking in Disassembly</title><link href="https://www.abhinavsaxena.com/moonwalk/hacking-in-disassembly" rel="alternate" type="text/html" title="Hacking in Disassembly" /><published>2020-06-12T00:00:00+00:00</published><updated>2020-06-12T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/Hacking-in-Disassembly</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/hacking-in-disassembly">&lt;p&gt;It’s been a fun time this summer. I’ve been messing with the disassemblies of
Pokemon FireRed and Emerald. I have some basic C knowledge and Assembly
knowledge so I was able to figure out, for the most part, how the code worked.
FireRed was harder to change the starters vs Emerald due to having to edit
Text, Pokemon, and Trainer Parties. I only edited the first battle and didn’t
update the rest of the game. If I was doing an actual hack, I probably would
have done that. This mainly took an hour once I figured out what I was doing.&lt;/p&gt;

&lt;h2 id=&quot;pics-or-it-didnt-happen&quot;&gt;Pics or it didn’t happen&lt;/h2&gt;
&lt;p&gt;Here’s some screenshots where I replaced the
Kanto Starters with the Johto Starters in FireRed.&lt;/p&gt;
&lt;div id=&quot;img-container&quot;&gt;
&lt;img src=&quot;/assets/chikorita_firered.png&quot; alt=&quot;Chikorita Selection&quot; /&gt;  
&lt;center&gt;&lt;span class=&quot;caption&quot;&gt;Chikorita Selection&lt;/span&gt;&lt;/center&gt;

&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- Mainly to create a line break --&gt;&lt;/p&gt;

&lt;div id=&quot;img-container&quot;&gt;
&lt;img src=&quot;/assets/totodile_firered.png&quot; alt=&quot;Totodile Selection&quot; /&gt;  
&lt;center&gt;&lt;span class=&quot;caption&quot;&gt;Totodile Selection&lt;/span&gt;&lt;/center&gt;

&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- Mainly to create a line break --&gt;&lt;/p&gt;

&lt;div id=&quot;img-container&quot;&gt;
&lt;img src=&quot;/assets/cyndaquil_firered.png&quot; alt=&quot;Cyndaquil Selection&quot; /&gt;  
&lt;center&gt;&lt;span class=&quot;caption&quot;&gt;Cyndaquil Selection&lt;/span&gt;&lt;/center&gt;

&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- Mainly to create a line break --&gt;&lt;/p&gt;

&lt;div id=&quot;img-container&quot;&gt;
&lt;img src=&quot;/assets/rival_firered.png&quot; alt=&quot;And once you pick your starter, the first rival battle...&quot; /&gt;  
&lt;center&gt;&lt;span class=&quot;caption&quot;&gt;And once you pick your starter, the first rival battle...&lt;/span&gt;&lt;/center&gt;

&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- Mainly to create a line break --&gt;&lt;/p&gt;

&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;TODO Seth: update with instructions on how I did it with a tutorial. If I
forgot, please open an Issue on the GitHub.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><category term="pokeemerald" /><category term="pokefirered" /><summary type="html">It’s been a fun time this summer. I’ve been messing with the disassemblies of Pokemon FireRed and Emerald. I have some basic C knowledge and Assembly knowledge so I was able to figure out, for the most part, how the code worked. FireRed was harder to change the starters vs Emerald due to having to edit Text, Pokemon, and Trainer Parties. I only edited the first battle and didn’t update the rest of the game. If I was doing an actual hack, I probably would have done that. This mainly took an hour once I figured out what I was doing.</summary></entry><entry><title type="html">Messin with CI</title><link href="https://www.abhinavsaxena.com/moonwalk/messin-with-ci" rel="alternate" type="text/html" title="Messin with CI" /><published>2020-05-17T00:00:00+00:00</published><updated>2020-05-17T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/Messin-with-CI</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/messin-with-ci">&lt;p&gt;Now that I got Travis CI set up, I can actually use other plugins that GitHub
Pages doesn’t support, like paginate-v2. Can’t wait to try them out but it was
a headache since I didn’t know how Travis CI works. Luckily YAML and
documentation isn’t too hard to figure out. I did find some blog posts around
the internet showing me how it’s done so I did try to follow those. However,
as evidenced by the CI errors, I had a few things happen to me hah. Now, I
better try the new features and see what happens.&lt;/p&gt;

&lt;p&gt;Other updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Azur Lane Sorter GUI is coming along nicely. Most buttons and functionality
work&lt;/li&gt;
  &lt;li&gt;RPI Emulator stalled until I can get a dremel.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Seth Barberee</name></author><summary type="html">Now that I got Travis CI set up, I can actually use other plugins that GitHub Pages doesn’t support, like paginate-v2. Can’t wait to try them out but it was a headache since I didn’t know how Travis CI works. Luckily YAML and documentation isn’t too hard to figure out. I did find some blog posts around the internet showing me how it’s done so I did try to follow those. However, as evidenced by the CI errors, I had a few things happen to me hah. Now, I better try the new features and see what happens.</summary></entry><entry><title type="html">Graduation amid Pandemic</title><link href="https://www.abhinavsaxena.com/moonwalk/graduation-amid-pandemic" rel="alternate" type="text/html" title="Graduation amid Pandemic" /><published>2020-04-26T00:00:00+00:00</published><updated>2020-04-26T00:00:00+00:00</updated><id>https://www.abhinavsaxena.com/moonwalk/Graduation-amid-Pandemic</id><content type="html" xml:base="https://www.abhinavsaxena.com/moonwalk/graduation-amid-pandemic">&lt;p&gt;With two weeks to go of college amid this pandemic, it’s shocking and
interesting to see how my life is changing. Just 1 month ago, I thought I
would be moving to California and starting my job in Santa Clara. Yet now, I’m
returning to my old home to work from home. I’m happy nonetheless that I still
have a job but it just shows how life can quickly change. Finals are underway
this week to which I don’t have to worry about a good majority of them. Aside
from them being online, the grades that I need to get either an A or B aren’t
too bad. I have to have a 30 on my final in my Operating Systems class to
get an A. I like these odds. It relaxes the stress of finals for me which in
turn boosts my confidence to do well. By May 10th, I should be finished with my
undergraduate college experience. I can’t believe it but it’s happening. On
that same day, I’ll pack up and leave the residence hall to return home. My
sisters are looking forward to someone else doing chores instead of them.
However, I do know that I have changed since I left home for college 4 years
ago. When I left, I was starting to explore who I really was amid bullying of
people in high school based on my families class and standing within the town.
I shoved all criticism aside to be who I wanted to be. This lesson helped me
grow and take off during college. Freshman year, I would tie with another
student to be Hall President and later, be impeached by him in his pursuit of
power. I stayed true to myself and served with passion. This would reward me
greatly as I became well-known and liked in Residence Life during my tenure as
a Resident Advisor and Residential Housing Executive Board Member. I would
voice key opinions of students at different levels and make a difference
around me. I was never in pursuit of power or something nice on my resume. I
just wanted to serve everyone around me. I wanted to be their voice and fight
for them. Of course, there were struggles and key learnings along the way.
Some of the things that I wanted to fight for just weren’t in the cards for
ResLife to feasibly achieve. I learned the inner workings of the university
and administration in order to better learn where to improve it. I never set
to create a legacy but with my gradation impending, many are reminding me how
large a figure I loomed at the university. My presence was always known and
appreciated. For once, I fit in and became a person that I wanted to be. I
grew into a mold that I created at the start. I found the key figures to look
up to and pushed myself when no one else would. I didn’t succeed at everything
but I am proud of what I did manage to do. I hope that people learned lessons
from me and become great leaders. After all, leadership isn’t just about you.
It’s about how you groom other leaders too. I never was one for the limelight
but I loved to help people get the recognition that they deserved for their
leadership. This post is probably drowning on a bit so I’ll wrap it up with
this. I won’t forget the lessons that I learned here. It’s a part of me and
made me who I am today. If someone is reading this, I hope they too can take a
lesson to heart: &lt;strong&gt;be who they want to be&lt;/strong&gt;.&lt;/p&gt;</content><author><name>Seth Barberee</name></author><summary type="html">With two weeks to go of college amid this pandemic, it’s shocking and interesting to see how my life is changing. Just 1 month ago, I thought I would be moving to California and starting my job in Santa Clara. Yet now, I’m returning to my old home to work from home. I’m happy nonetheless that I still have a job but it just shows how life can quickly change. Finals are underway this week to which I don’t have to worry about a good majority of them. Aside from them being online, the grades that I need to get either an A or B aren’t too bad. I have to have a 30 on my final in my Operating Systems class to get an A. I like these odds. It relaxes the stress of finals for me which in turn boosts my confidence to do well. By May 10th, I should be finished with my undergraduate college experience. I can’t believe it but it’s happening. On that same day, I’ll pack up and leave the residence hall to return home. My sisters are looking forward to someone else doing chores instead of them. However, I do know that I have changed since I left home for college 4 years ago. When I left, I was starting to explore who I really was amid bullying of people in high school based on my families class and standing within the town. I shoved all criticism aside to be who I wanted to be. This lesson helped me grow and take off during college. Freshman year, I would tie with another student to be Hall President and later, be impeached by him in his pursuit of power. I stayed true to myself and served with passion. This would reward me greatly as I became well-known and liked in Residence Life during my tenure as a Resident Advisor and Residential Housing Executive Board Member. I would voice key opinions of students at different levels and make a difference around me. I was never in pursuit of power or something nice on my resume. I just wanted to serve everyone around me. I wanted to be their voice and fight for them. Of course, there were struggles and key learnings along the way. Some of the things that I wanted to fight for just weren’t in the cards for ResLife to feasibly achieve. I learned the inner workings of the university and administration in order to better learn where to improve it. I never set to create a legacy but with my gradation impending, many are reminding me how large a figure I loomed at the university. My presence was always known and appreciated. For once, I fit in and became a person that I wanted to be. I grew into a mold that I created at the start. I found the key figures to look up to and pushed myself when no one else would. I didn’t succeed at everything but I am proud of what I did manage to do. I hope that people learned lessons from me and become great leaders. After all, leadership isn’t just about you. It’s about how you groom other leaders too. I never was one for the limelight but I loved to help people get the recognition that they deserved for their leadership. This post is probably drowning on a bit so I’ll wrap it up with this. I won’t forget the lessons that I learned here. It’s a part of me and made me who I am today. If someone is reading this, I hope they too can take a lesson to heart: be who they want to be.</summary></entry></feed>